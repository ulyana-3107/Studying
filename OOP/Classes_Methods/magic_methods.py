# Магические методы (используются при работе с атрибутами)
# __setattr__(self, key, value) - автоматически вызывается при изменении свойства key класса
# __getattribute__(self, item) - автоматически вызывается при получении свойства класса с именем item
# __getattr__(self, item) - автоматически вызывается при получении несузествующего свойства item класса
# __delattr__(self, item) - автоматически вызывается при удалении свойства item (не важно, существует оно или нет)


class Point:
    def __init__(self, a, b):
        self.x, self.y = a, b

    # данный метод вызывается автоматически когда идет считывание аттрибута через экземпляр класса
    # item - элемент, к которому идет обращение.
    # также можно сделать запрет на обращение к каким-либо атрибутам
    def __getattribute__(self, item):
        print('__getattribute__')
        # в данном случае при обращении к x будет сигнал об ошибке.
        if item == 'x':
            raise ValueError('no access!')
        else:
            return object.__getattribute__(self, item)

    # данный метод вызывается каждый раз при создании нового атрибута
    def __setattr__(self, key, value):
        print('__setattr__')
        # с помощью этого метода можно запретить создание какой-либо переменной
        if key == 'z':
            raise AttributeError('Недопустимое значение!')
        else:
            self.__dict__[key] = value

    # данный метод вызывается автоматически, когда идет обращение к несуществующему атрибуту экземпляра класса.
    # тоесть этот метод следует перегрузить если нам нужно чтобы при обращении к несуществующим атрибутам не возникала
    # ошибка (заменить на return False)
    def __getattr__(self, item):
        print(f'__getattr__: {item}')
        return False

    # данный метод автоматически вызывается когда удаляется атрибут из экземпляра класса
    def __delattr__(self, item):
        print(f'__delattr__: {item}')
        object.__delattr__(self, item)



obj = Point(2, 3)
a = obj.y
obj.y = 3
print(obj.y)
print(obj.lol)
del obj.y
print(obj.__dict__)


