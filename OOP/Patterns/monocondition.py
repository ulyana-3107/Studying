# паттерн Моносостояние
# пример: есть какой-либо многопоточный процесс, и в каждом потоке создают свой экземпляр класса ThreadData, но нам нуж
# но, чтобы все экземпляры имели единые локальные свойства (в том смысле, чтобы они были общими для всех экземпляров кл
# асса) и изменение какого-либо экземпляра отражалось бы и в других экземплярах

class ThreadData:
    # словарь с общими локальными свойствами экземпляров этого класса
    __shared_attrs = {'name': 'thr1', 'data': {}, 'id': 1}


    # у каждого новосозданного объекта есть коллекция dict которая хранит локальные свойства экземпляра класса поэтому
    # присвоим коллекции словарь созданный выше -> у всех новых объектов будут общие свойства


    def __init__(self):
        self.__dict__ = self.__shared_attrs


td1, td2 = ThreadData(), ThreadData()
print(td1.__dict__, td2.__dict__)
td1.__dict__['new'] = 'lol'
print(td1.__dict__, td2.__dict__)

